// Fonte: https://blog.pantuza.com/artigos/busca-binaria

#include <stdlib.h>
#include <iostream>

#define VECTOR_SIZE 10 // Tamanho do vetor de busca

using namespace std;

/**
 * -Busca Binária Sequencial-
 * Busca sequencialmente o item dentro do vetor vector.
 * Caso encontrado retorna o índice do item. Caso contrário
 * retorna -1.
 */
int
sequential_search (int vector[VECTOR_SIZE], int item)
{
    for (int i = 0; i < VECTOR_SIZE; i++) {
        if (vector[i] == item) {
            return i; // Retorna o índice do item encontrado
        }
    }
    return -1; // Retorna -1 se o item não for encontrado
}

/**
 * -Busca Binária Recursiva-
 * Busca recursivamente o item dentro do vetor vector. A cada iteração
 * reduz o espaço de busca pela metade. Quando encontra o item retorna
 * o índice onde ele foi encontrado. Caso contrário retorna -1.
 */
int
recursive_binary_search(int vector[VECTOR_SIZE], int begin, int end, int item)
{
    int i = (begin + end) / 2; // Calcula o meio do sub-vetor

    if (begin > end) {
        return -1; // Retorna -1 se o item não for encontrado
    }

    if (vector[i] == item) {
        return i; // Retorna o índice do item encontrado
    }

    if (vector[i] < item) {
        return recursive_binary_search(vector, i + 1, end, item); // Busca no sub-vetor à direita
    } else {
        return recursive_binary_search(vector, begin, i - 1, item); // Busca no sub-vetor à esquerda
    }
}

/**
 * -Busca Binária Iterativa-
 * Busca iterativamente o item dentro do vetor vector. A cada iteração
 * reduz o espaço de busca pela metade sem fazer chamadas recursivas.
 * Ao encontrar o item retorna seu índice. Caso contrário retorna -1.
 */
int
iterative_binary_search(int vector[VECTOR_SIZE], int item)
{
    int begin = 0;
    int end = VECTOR_SIZE - 1;

    while (begin <= end) {  // Condição de parada
        int i = (begin + end) / 2;  // Calcula o meio do sub-vetor

        if (vector[i] == item) {  // Item encontrado
            return i; // Retorna o índice do item encontrado
        }

        if (vector[i] < item) {  // Item está no sub-vetor à direita
            begin = i + 1;
        } else {  // vector[i] > item. Item está no sub-vetor à esquerda
            end = i - 1;
        }
    }

    return -1; // Retorna -1 se o item não for encontrado
}

int
main (int argc, char* argv[])
{
    int vector[VECTOR_SIZE] = {5, 23, 27, 30, 39, 45, 56, 71, 80, 92}; // Vetor de busca

    for (int i = 0; i < VECTOR_SIZE; i++) {
        // Item atual a ser buscado
        int item = vector[i];

        // Testa a busca sequencial
        cout << "Sequential search " << item << ": \t\t" << sequential_search(vector, item) << endl;

        // Testa a busca binária recursiva
        cout << "Recursive binary search " << item << ": \t" << recursive_binary_search(vector, 0, VECTOR_SIZE - 1, item) << endl;

        // Testa a busca binária iterativa
        cout << "Iterative binary search " << item << ": \t" << iterative_binary_search(vector, item) << endl;

        cout << endl;
    }

    return EXIT_SUCCESS;
}